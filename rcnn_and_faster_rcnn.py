# -*- coding: utf-8 -*-
"""RCNN and Faster RCNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O74h1UjcGGalIFWuBzXmgR30JVyds2hI
"""

import cv2
import numpy as np
import torch
from torchvision import models
import torchvision.transforms as T
import matplotlib.pyplot as plt

# Paths
image_path = "/content/U23PG507DTS021.jpg"

# Load models
faster_rcnn_model = models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
faster_rcnn_model.eval()

rcnn_model = models.detection.maskrcnn_resnet50_fpn(pretrained=True)
rcnn_model.eval()

# Function to detect objects using the specified model
def detect_objects(image_path, model, color):
    image = cv2.imread(image_path)

    if image is None:
        print("Error: Image not loaded. Check the file path.")
        return None

    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    transform = T.Compose([T.ToTensor()])
    image_tensor = transform(image_rgb)

    with torch.no_grad():
        output = model([image_tensor])

    boxes = output[0]['boxes'].numpy()
    labels = output[0]['labels'].numpy()
    scores = output[0]['scores'].numpy()

    coco_labels = [
        '_background_', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat',
    ]

    detection_threshold = 0.7

    for i in range(len(boxes)):
        if scores[i] > detection_threshold:
            (x1, y1, x2, y2) = boxes[i].astype(int)
            label = coco_labels[labels[i]] if labels[i] < len(coco_labels) else 'unknown'

            # Draw bounding box
            cv2.rectangle(image_rgb, (x1, y1), (x2, y2), color, 2)

            # Label text
            text = f"{label}: {scores[i]:.2f}"
            cv2.putText(image_rgb, text, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

    return image_rgb

# Display results from both models separately
def display_separate_results(image_path):
    # Get results from Faster R-CNN (Green boxes)
    faster_rcnn_result = detect_objects(image_path, faster_rcnn_model, (0, 255, 0))
    # Get results from Mask R-CNN (Blue boxes)
    rcnn_result = detect_objects(image_path, rcnn_model, (255, 0, 0))

    # Display Faster R-CNN result
    if faster_rcnn_result is not None:
        plt.figure(figsize=(12, 8))
        plt.title("Faster R-CNN Result")
        plt.imshow(faster_rcnn_result)
        plt.axis('off')
        plt.show()

    # Display Mask R-CNN result
    if rcnn_result is not None:
        plt.figure(figsize=(12, 8))
        plt.title("R-CNN Result")
        plt.imshow(rcnn_result)
        plt.axis('off')
        plt.show()

if image_path:
    display_separate_results(image_path)

